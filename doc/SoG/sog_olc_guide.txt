#
# $Id: sog_olc_guide.txt,v 1.8 2004-06-23 17:14:20 tatyana Exp $
#

Оглавление:
	I. Введение.
	II. Создание и редактирование арий.
	III. Работа с комнатами.
	    III.I. Создание комнат и их редактирование.
	    III.II. Выходы и их характеристики.
	IV. Создание мобов и их редактирование.
	V. Создание объектов и их редактирование.
	    V.I. Общие положения.
	    V.II. Внутреннее содержание объектов в зависимости от их типа.
	VI. Расположение по комнатам.
	    VI.I. Мобы.
	    VI.II. Объекты.
		VI.II.I. Первый случай. Объект у моба или одет на нем.
		VI.II.II. Второй случай. Объект в комнате.
		VI.II.III. Третий случай. Объект в объекте.
	    VI.III. Создание случайных выходов.
	VII. Магазины.
            VII.I. Создание продавца.
	    VII.II. Магазины домашних животных.
	VIII. Mud progs.
	IX. Послесловие.

			I. Введение:
			------------

  В мире Серых Теней поддерживается несколько языков. В настоящее время два:
английский и русский. Поэтому все описания должны быть выполнены на двух
языках (если на одном, то на английском). eng/rus/all ниже по тексту означает
для какого языка делается то или иное описание/сообщение. eng - для англий-
ского, rus -- для русского, all -- сразу для обоих. Нужно понимать, что eng
выводится тем, кто играет на анг. языке (lang eng), rus - тем, кто использует
русский язык (lang rus), all -- выводится и тем, и другим. 
  Если вы не используете all, то вы должны помнить что описания нужно писать
и для rus и для eng, не забывая об одном из них. Если же вы пишите для all,
то помните, что писать следует на английском языке.
  Также помните о следующих правилах. Знаки препинания ставятся сразу после
идущего до них слова, а после них ставится пробел.
Например:
	правильно:   [Дождь, шедший два дня, перестал.]
	неправильно: [Дождь ,шедший два дня , перестал.]
Прямая речь: 
	правильно:   [Катя сказала: "Мне очень приятно видеть Вас."]
	неправильно: [Катя сказала 'Мне очень приятно видеть Вас.']
	правильно:   [Lessa tells you 'Hello, my friend.']
	неправильно: [Lessa tells you:" Hello, my friend."]
  Открывающаяся скобка идет через пробел после предыдущего слова, закрывающаяся без пробела:
	правильно:   [ежик (hedgehog) колюч]
	неправильно: [ежик ( hedgehog ) колюч, ежик(hedgehog) колюч]
  Предложения должны начинаться с большой буквы и заканчиваться точкой или
восклицательным/вопросительным знаком. Кроме начала предложения с большой
буквы пишутся только имена собственные. Просто же названия должны писаться
не с большой, а с маленькой буквы.
  Буквы 'Ё, ё' не используются, их заменяют буквы 'Е, е'.
  Не следует использовать цвета в названиях комнат, описаниях объектов,
мобов, комнат. Цвета допускаются в редких случаях в коротких описаниях очень
оригинальных/редких объектов и не более того. Для английского языка короткое
описание не должно содержать артикля. Короткие описания мобов должны начинаться
с определенного артикля.
  Описания (description) пишутся во встроенном редакторе. ':h' -- покажет
статью помощи (команды, etc). Длина строки описания не должна превышать 80ти
символов, лучше если она будет 72-75 символов длиной. Помимо этого разница в
длинах строк не должна быть существенной, идеально когда она не превышает 2
символов. Описание автоматически будет выводится с отступом в первой строке.
Поэтому при его написании не нужно делать первую строчку красной, но если в
вашем описании несколько абзацев, то ваша красная строка должна начинаться
с отступа длиной в два пробела.
  Короткие описания (short descr) для русского языка должны писаться следу-
ющим образом: склоняемая часть описания должна заключаться в ~~. Например:
'~ореховое~ ~масло~' или '~колчан~ из кожи'. Если короткое описание состоит
из одного слова, например, дуб, тильды писать не нужно. Если имеются символы
цвета они должны стоять вне тильд, например, '{Y~желтый~{x ~цветок' плюс нужно
всегда использовать {x (не {z) и ни в коем случае не забывать об этом.
  При использовании двух языков для русского длинного описания (long descr)
используется следующий формат: оно _обязательно_ должно содержать английское
имя моба (объекта). Например: 'Маленькая снежинка (snowflake) переливается
разными цветами.' При этом snowflake должно содержаться в name list (и,
желательно, стоять в нем первым).

		   II. Создание и редактирование арий.
		   -----------------------------------

Для того, чтобы создать новую арию, необходимо использовать команду 'create
area'. Для редактирования, используется команда 'edit area <num>', где num
порядковый номер арии, который можно узнать с помощью команды 'alist area'.
После того, как ария создана или начато редактирование, команда 'show' пока-
жет содержание арии (синонимом для 'show' служит просто нажатие <enter>) в
следующем формате:

Name:     [  118] New area
File:     area118.are
Vnums:    [0-0]
Levels:   [0-0]
Age:      [0]
Players:  [0]
Security: [1]
Credits:  [(null)]
ResetMsg: [all] [(null)]
Flags:    [changed]

Name: команда 'name all/eng/rus <area name>:
	устанавливает имя для арии (показывается в 'alist area' и 'areas'. 

File: команда 'filename <file name>':
	устанавливает название файла, в котором будет храниться ария.

Vnums: команды 'minvnum <lowest vnum>' и 'maxvnum <highest vnum>':
	устанавливаются виртуальные номера комнат/обьектов/мобов для арии.

Levels: команды 'minlevel <lowest level>' и 'maxlevel <highest level>':
	устанавливается диапазон рекомендуемых уровней для посещения арии,
	показывается в 'areas'.

Age, players:
	не устанавливаются.

Security: команда 'security <num>':
	устанавливается уровень security для арии, обычно 9.

Builders: команда 'builder <builders name>':
	те, кто указываются как builder'ы арии могут ее редактировать независимо
	от уровня их security, если у арии нет builder'ов, данное поле не пока-
	зывается.

Credits: команда 'credits <credits info>':
	информация о создателе арии (имя), показывается в 'areas'.

ResetMsg: команда 'resetmsg all/eng/rus <reset msg>':
	создается сообщение, которое будет выводится при обновлении арии нахо-
	дящимся в ней персонажам.

Flags: команда 'area <area flags>':
	особые свойства арии, список флагов можно увидеть при помощи команды
	'area ?'.
	changed -- ария менялась, ставится автоматически
	closed  -- ария закрыта, ее не показывают по 'areas', в нее невозможно
	           попасть при помощи teleport, gate, etc.
	noquest -- квестор не будет давать задания в эту арию
	update_always -- мобы, живущие в арии совершают действия (ходят, etc)
		   и при отсутствии в арии персонажей
	update_frequently -- частое обновление арии, где-то каждые 3 тика,
		   независимо от наличия персонажей в арии

		III. Работа с комнатами.
		------------------------

	III.I. Создание комнат и их редактирование:
	-------------------------------------------

  Для создания новой комнаты используется команда 'create room <vnum>'. Vnum
должен лежать в диапазоне, указанном для вашей арии (см. выше). Для редакти-
рования уже существующей комнаты используется 'edit room <vnum>' или 'edit
room', во втором случае редактироваться будет та комната, в которой ты нахо-
дишься. Для того чтобы узнать vnum для 'edit room' можно использовать команду
'alist room all' или же просто 'alist room'. 
  Существует еще один способ создания комнат сразу связанных выходами
с друг другом, но об этом речь пойдет ниже. Тем более, что первая комната в
арии всегда создается указанным выше способом. При таком создании комнат ты
переносишься в только что созданную.
  После создания комнаты или начала ее редактирования, написав 'show' или
нажав <enter> комната предстанет перед тобой в следующем формате:

Vnum:       [51050]
Area:       [  117] Dessins d'enfants
Name:       [all] [(null)]
Description:
[all] [(null)]
Sector:     [inside]
Room flags: [none]

Vnum: виртуальный номер редактируемой комнаты.

Area: зона, которой принадлежит редактируемая комната.

Name: команда 'name all/eng/rus <rooms name>':
	создается название комнаты, оно должно начинаться с большой буквы,
	но не должно заканчиваться точкой или иным знаком препинания.

Description: команда 'desc all/eng/rus':
	описание комнаты, не должно быть слишком коротким, минимум три-четыре
	строки длиной.

Sector: команда 'sector <rooms sector>':
	к какому типу принадлежит комната, влияет на передвижение (как быстро
	ты устаешь), работу различный умений, некоторый умения работают только
	в строго определенных секторах (e.g. camo, ambush), некоторые работают
	лучше или хуже в зависимости от сектора (e.g. dirt kick). Возможные
	значения этого поля можно посмотреть при помощи команды 'sector ?'.
        -- inside, внутренняя комната, то есть находится внутри помещения,
	нельзя узнать погоду.
	Все остальные типы являются внешними:
 	-- city, город
	-- field, поле
	-- forest, лес
	-- hills, холмы
	-- mountain, горы
	-- swim, любой водоем (нужно иметь лодку или уметь летать)
	-- noswim,
	-- underwater, подводная комната (нужно уметь дышать под водой)
	-- air, в воздухе (нужно уметь летать)
	-- desert, пустыня, испаряются жидкости, тают ледяные вещи

Room flags: команда 'room <rooms flags>':
	особые свойства комнаты, 'room ?' покажет возможные значения этого
	поля.
	-- dark, темная комната, ничего не видно без источника света
	-- silent, место безмолвия, нельзя петь, кричать, говорить, etc
	-- nomob, в комнате нельзя создавать мобов ('call bear', etc)
	-- indoors, только по таким передвигаются мобы с act indoors
	-- peace, нельзя самонить зверей (bear, lions), не работают некоторые
	умения (vanish, kidnap, summon, bamf, animate, etc), не забредают агр
	мобы, нельзя войти с адреналином, нельзя нападать
	-- private, в такой комнате не может находиться более двух существ
	-- safe, как и peace, но можно звать зверей
	-- solitary, в комнате может находится не более одного живого существа
        -- pet_shop, магазин домашних животных 
	-- norecall, нельзя recall, gate, summon
        -- imp_only, только implementor'ы могут войти в такую комнату
        -- gods_only, только боги могут войти в такую комнату
        -- heroes_only, только hero и имморталы могут войти в такую комнату
	-- newbies_only, только newbie (до 5 уровня) и имморталы могут войти
	в такую комнату
	-- law, не работают некоторые умения (e.g. kidnap), недоступны для
	агрессивных мобов
	-- nowhere, не показывается по where (пока не используется)
        -- bank, банк 
	-- nomagic, нельзя пользоваться магией (spells)
	-- nosummon, пока не используется gate, summon
        -- battle_arena, арена для поединков, специальная обработка смерти
        -- guild, гильдия, не заходят моб, нельзя зайти в чужую
	-- registry, место где можно сменить "прописку", сделать себе
	другой домашний город (доступно не всем классам/расам)

  По умолчанию у любой комнаты hprate/manarate (скорость восстановления маны
или hp) 100%, их можно изменить при помощи команд heal #, mana #.
  Если тебе необходимо получить копию уже имеющейся комнаты, ты можешь
это сделать с помощью команды 'clone <vnum>', где vnum -- виртуальный номер
комнаты-образца. 'clone <vnum>' копирует только описания, 'clone all <vnum>'
копирует описания, sector, room flags.
  В комнате может быть mud_prog'а, см. соответствующий раздел.
  Удалить комнату можно при помощи команды 'delete_room'.

		III.II. Выходы и их характеристики.
		-----------------------------------

  Вся команды для работы с выходами начинаются с названия соответствующего
выхода. Их шесть: north, east, west, south, up, down.

  Команда '<dir> ?' покажет, что вообще можно делать с выходами.
  Чтобы соединить две существующих комнаты используется '<dir> link <vnum>'
и '<dir> room <vnum>'. Первое создает двустороннюю связь между комнатами
(выход на <dir> ведет из комнаты где ты находился в комнату <vnum> и назад),
вторая лишь одностороннюю (выход ведет из комнаты, где ты стоишь в комнату
<vnum>, но не назад).
  Чтобы создать комнату лежащую на <dir> от имеющейся и связанную с ней двус-
торонним проходам, используется команда '<dir> dig <vnum>', где vnum номер
новой создаваемой комнаты.
  Удалить выход можно с помощью команды '<dir> delete'. Двусторонняя связь при
этом рвется полностью.

  Внешний вид выхода и ключи.

-up    to [ 3001] Key: [   -1]  Exit flags: [none ]
Kwds:   [door secret дверь секретная]
Short:  [all] [secret door]
Gender: [all] [female]
Description:
[all] [(null)]

Выход может быть специфическим, например с дверью. Чтобы увидеть возможные
варианты '<dir> flags ?'.
-- door, имеется дверь
Все остальные флаги требуют установленного флага door:
-- closed, дверь закрыта
-- locked, дверь заперта (ключ которым можно отпереть такую дверь устанавли-
вается при помощи <dir> key <vnum>', где <vnum> -- виртуальный номер объекта,
типа key, который будет служить ключем
-- noflee, нельзя сбежать в эту сторону, в том числе при помощи 'escape' 
-- pickproof, дверь нельзя открыть без ключа ('pick lock', 'knock')
-- nopass, нельзя пройти сквозь дверь (имея 'pass door')
-- easy, дверь легко выбивается ('bash door') (пока не используется)
-- hard, дверь тяжало выбить ('bash door') (пока не используется)               
-- infuriating, пока не используется
-- noclose, дверь нельзя закрыть (всегда открыта)
-- nolock, дверь нельзя запереть             

У выхода может быть имя и описание.
Kwds: команда '<dir> name <names list>':
	название выхода, при look <одно из names list> будет показываться
	описание выхода 
Short: команда '<dir> short all/eng/rus <short desc>':
	дает short desc выходу, это то что будет подставляться в сообщения
	типа 'Ты открыл <short>.' Поэтому здесь надо не забывать о правиле
	написания склоняемой части short desc в тильдах (для русского языка)
	например, ~секретная~ ~дверца~.
Gender: команда '<dir> gender all/eng/rus <gender>':
	Если у дверцы есть специальное имя, то в этом поле проставляется род
	этого имени. Понятно, что для англ. языка это делать не нужно, но для
	русского необходимо. Например, для секретной дверцы нужно сделать
	<dir> gender rus female. Возможные значения для рода: male (мужской),
	female (женский), neutral (средний) и plural (множественный).
Description: команда '<dir> desc all/eng/rus':
	редактирование описания, оно показывается когда делается look в этом
	направлении или на одно из kwds. Может отсутствовать, но для общей
	картины лучше чтобы оно было.

Помимо всего уже упомянутого выше, у выхода есть такой параметр как размер,
который определяет какого размера существа могут пройти сквозь этот выход.
Например, через выход с размером small не смогут пройти существа имеющие
больший размер, то есть из pc только гномы cсмогут проходить сквозь этот
выход. Команда '<dir> size <size>'. Возможные размеры в порядке увеличения:
tiny, small, medium, large, huge, giant, gargantuan.

В комнате могут присутствовать так называемые дополнительные описания (exd).
На них можно смотреть :) Использование: 'exd add keyword all/eng/rus',
'exd edit keyword all/eng/rus', 'exd edit keyword reset'. Для полного списка
возможный действий с exd используй 'exd ?' или просто 'exd'.
Описаний может быть несколько.

		IV. Создание мобов и их редактирование.
		---------------------------------------

  Для создания нового моба используется команда 'create mobile <vnum>'. Для
редактирования 'edit mob <vnum>'. Список мобов можно увидеть при помощи
команды 'alist mob all'. Вместо all можно использовать имя <name>, в этом
случае покажутся все мобы в этой арии, имеющие такое имя.
  После создания или начала редактирования, нажатием <enter> или командой
'show' можно увидеть мобы в следующем формате: 

Name:        []
Area:        [    1] Limbo
Vnum:        [    1]    Race: [human]
Gender:      [all] [none]
Short descr: [all] [(null)]
Long descr:
[all] [(null)]
Description:
[all] [(null)]
Act:         [none]
Level:       [ 0]    Align: [   0]      Hitroll: [ 0] Dam Type:    []
Hit dice:    [ 0d0  +   0] Damage dice: [ 0d0  +   0] Mana dice:   [ 0d0  +   
0]
Affected by: [none]
Invis:       [none]
Detect:      [none]
Armor:       [pierce: 0  bash: 0  slash: 0  exotic: 0]
Form:        [none]
Parts:       [none]
Off:         [none]
Size:        [medium]
Material:    [unknown]
Start pos:   [stand]
Default pos: [stand]
Wealth:      [    0]
Expierence multiplier: [100%]

Name: команда 'name <name list>':
	Name -- это наименование мобы, имена которые можно использовать при
	look, kill, etc. Первое имя в этом списке не должно быть прилагательным
	и, если вы используете два языка, оно обязательно должно быть англий-
	ским. 

Area: кокой арии принадлежит редактируемый моб (номер и название).
Vnum: виртуальный номер редактируемого моба.

Race: команда 'race <race name>':
	устанавливает расу, при помощи 'race ?' можно увидеть список
	возможных рас.

Gender: команда 'gender all/eng/rus <gender>':
	пол моба (male, female, plural, neutral), none = neural.
	может иметь по either, то есть рождаться как мужского, так
	и женского пола. При использовании двух языков, нужно моба
	с полом eiter делать мужского пола (описания) и добавлять 
	ему при помощи команды fvnum <vnum> пару женского пола
	(описания), коротая создается в арии clones.are и имеет
	виртуальный номер <vnum>.

Short descr: команда 'short all/eng/rus <desc>':
	короткое описание, используется например в битве при выводе
	сообщений об ударах.

Long descr: команда 'long all/eng/rus <desc>':
	длинное описание, то которое показывается, напрмер, при look в
	комнате, где стоит этот моб. Не должно быть слишком длинным, лучше
	всего не более 80 символов.

Description: команда 'desc all/eng/rus':
	описание моба, видно при look на него. Не должно быть слишком коротким,
	хотя бы три строчки.

Act: команда 'act <acts>':
	значения этого поля определяют поведение и свойства моба. 'act ?'
	покажет тебе все возможные значения.
	-- familiar, моб -- фамилиар (для одноименного заклинания)
        -- sentinel, моб не двигается с места (охота за напавшим на него не
	в счет)
        -- scavenger, поднимает мусор (объекты с типом trash)
        -- summoned, моб рассматривается как часть хозяина (например при
	убийстве квестового моба)
	-- imm_summon, не самонится, нельзя делать на него gate
	-- immobile, моб не двигается и не дерется
        -- aggressive, нападает первый
	-- stay_area, не выходит из арии (при шатании по ней)
        -- wimpy, сбегает, когда остается мало hp
	-- pet, домашнее животное
	-- imm_steal, обладает иммунитетом к воровству
        -- hunter, имеет умение 'hunt'
        -- cleric, mage, thief, warrior определяют статы моба (изменяют по
	сравнению со средним уровнем), точность его удара (как у соответству-
	ющего класса + warrior имеет вторую атаку 
	-- noalign, пока не используется
	-- nopurge, неуязвим для команды 'purge'
	-- outdoors, не заходит в indoor комнаты
	-- indoors, не выходит из indoor комнат
        -- rideable, может служить верховым животным
	-- update_always, ходит даже если в арии никого нет
	-- notrack, если напавший на этого моба сбегает, моб не ведет за
	ним охоты, неуязвим для range attack

Level: команда 'level <num>':
	уровень моба устанавливается <num>

Align: команда align <num>:
	alignment моба, может лежать в диапазоне от -1000 до 1000.

Hitroll: команда hitroll <num>:
	hiroll моба, влияет на точность попаданий моба

Damtype: команда 'damtype <damtype>':
	тип наносимого мобом урона, 'damtype ?' для того, чтобы увидеть
	возможные значения этого поля.
	Значения: cbite, beating, bite, blast, charge, chill, chomp, chop,
	claw, cleave, crush, digestion, divine, drain, flame, flbite, frbite,
	grep, kiss, magic, none, peck, peckb, pierce, pound, punch, scratch,
	shbite, shock, slap, slash, slice, slime, smash, stab, sting, suction,
	thrust, thwack, whip, wrath. 

Hitdice: команда 'hitdice <num1>d<num2> + <num3>':
	количество hp у моба. <num3> база, <num1>d<num2> определяет разброс в
	количестве hp у моба в его различных реинкарнациях.

Damdice: команда 'damdice <num1>d<num2> + <num3>:
	урон, наносимый мобом. <num1>d<num2> определяет разброс, <num3>
	постоянная составляющая.

Manadice: команда 'manadice <num1>d<num2> + <num3>':
	количество mana у моба, аналогично damdice и hitdice (сейчас мана у
	мобов не тратится)

Affected by, invis, detect: команды 'addaffect <type> { <where> | none } { <loc> <mod> | none } [<bits>]', 'delaff <num>':
	под какими аффектами находится моб. варианты можно посмотреть, указывая
	полем ?.
	
Armor: команда 'armor <#1> <#2> <#3> <#4>':
	армор моба, #1 -- vs pierce, #2 -- vs bash, #3 -- vs slash
	#4 -- vs exotic.

Form: команда 'form <forms>':
	специфические свойства. Для того, чтобы посмотреть возможные значения
	можно использовать 'form ?'. Проставляй формы своему мобу (если они
	пока не работают, это не значит, что они не будут работать всегда, а
	потому ставить их нужно)
	Значения:
	-- edible, отвалившаяся часть тела будет съедобной
	-- poison, отвалившаяся часть тела будет ядовитой
	-- magical, отвалившаяся чать тела будет магической
	-- instant_decay, не остается трупа и/или частей тела
	-- other, пока не используется
	-- animal, является животным ('control animal')
	-- sentient, разумное, может одевать одевать одежки
	-- undead, является undead'ом (неуязвим для plague, etc)
	-- construct, сборный (неуязвим для calm, plague, poison)
	-- mist, туманное воздушное создание (пока не используется)
	-- intangible, пока не используется
	-- biped, двуногое, могут одевать одежки
	-- centaur, кентавр (пока не используется)
	-- insect, насекомое (пока не используется)
	-- spider, паукообразное (пока не используется)
	-- crustacean, с панцирем? (пока не используется)
	-- worm, червь (пока не используется)
	-- blob, пузырь (пока не используется)
	-- mammal, млекопитающее (пока не используется)
	-- bird, птица (пока не используется)              
	-- reptile, рептилия (пока не используется)
	-- snake, змея (пока не используется)
	-- dragon, дракон (пока не используется)
	-- amphibian, амфибия (пока не используется)         
	-- fish, рыба (пока не используется)
	-- cold_blood, с холодной кровью (пока не используется)

Способность одевать одежки не проверяется при reset, поэтому нужно
следить за этим, для корректности.

Parts: команда 'part <parts>':
	части тела моба, отлетают при смерти. 'part ?' покажет список
	возможных значений.
	Значения:
	-- head, сердце
	-- arms, руки
	-- legs, ноги
	-- heart, сердце
	-- brains, мозги
	-- guts, внутренности
	Нижеследующие части тела пока никак ни на что не влияют.
	-- hands, ладони
	-- feet, ступни
	-- fingers, пальцы
	-- ear, уши
	-- eye, глаза
	-- long_tongue, длинный язык
	-- eyestalks
	-- tentacles, щупальцы
	-- fins, плавники, ласты
	-- wings, крылья
	-- tail, хвост
	-- claws, когти
	-- fangs, зубы
	-- horns, рога
	-- scales, панцирь
	-- tusks, клыки, бивни

Off: команда 'off <off flags>':
	боевые умения моба, значения можно увидеть при помощи 'off ?'.
	Значения: area_attack, backstab, bash, berserk, disarm, dodge,
        fade (пока не используется), fast, kick, dirt_kick, parry, rescue
	(пока не используется), tail, trip, crush, distance, deathblow,
	spellbane, assist_all, assist_align, assist_race, assist_players,
	assist_guard (пока не используется), assist_vnum, thorny (для 
	мобов типа ежика).

Size: команда 'size <mobiles size>':
	размер моба, в порядке возрастания: tiny, small, medium, large,
	huge, giant, gargantuan. Увидеть значения можно с помощью 'size ?'.

Material: команда 'material <название>':
	оказывает влияние при совпадении material и имеющегося типа урона
	на resist. (fire elemental, например) 

Startpos: команда 'startpos <pos>':
	состояние, которое имеет моб при своем появлении (рождении).

Defaultpos: команда 'defaultpos <pos>:
	состояние, которое принимает моб после завершения каких-либо
	действий, например после драки.

Wealth: команда 'wealth <num>':
	вес моба, определяет количество денег остающееся после смерти моба.

Expierence multiplier: команда 'xmult <%>':
	определяет % опыта от максимального, который можно получить за
	моба

Моб может иметь incognito и wisi. Команды 'incognito <lev>', 'wizi <lev>';
состоять в клане ('clan <clan name>'), аналогично комнатам можно создать
копии уже имеющихся мобов при помощи 'clone <vnum> all' -- полная копия
и 'clone <vnum>' -- идентичные описания. 

Существует несколько вариантов поведения для моба, или можно написать свои,
см. mud progs.

Все мобы имеют расовые резисты, но можно дать особенные резисты мобу (лучше
чтобы они все же были расовыми). Комманда 'resist <damclass> <%>'. Damclass
те же, что и в 'damtype ?', Отрицательное значение означает уязвимость к
воздействию, положительное -- сопротивляемость. Чтобы убрать резист, командa
'resist <damtype> undef'. Расовые резисты можно посмотреть при помощи команды
'ashow race <name of race>'.

Для того, чтобы удалить моба, нужно использовать команду 'delete_mob'.

Команда 'where' покажет в каких комнатах заресечен моб.

		V. Создание объектов и их редактирование.
		-----------------------------------------

  Для создания нового объекта используется команда 'create object <vnum>'.
Vnum должен лежать в диапазоне, указанном для арии. При помощи 'alist obj
all' можно увидеть все объекты, имеющиеся в редактируемой арии. При помощи
'alist obj <name>' можно увидеть все имеющиеся в арии объекты с именем name.
Для того, чтобы начать редактирование уже существующего объекта, используется
команда 'edit obj <vnum>'.

  После создания нового объекта, нажав <enter> или написав 'show', ты
увидишь следующую картину:

Name:        []
Area:        [    1] Limbo
Vnum:        [   46]
Type:        [trash]
Gender:      [all] [none]
Short desc:  [all] [(null)]
Long desc:
[all] [(null)]
Limit:       [none]
Stat flags:  [none]
Obj flags:   [none]
Material:    [unknown]
Condition:   [  100]
Weight:      [    0]
Cost:        [    0]
Approx level [    0]

Name: команда 'name <name list>:
	ключи на которые откликается объект (при get, look, etc). Первое
	должно быть существительным и при использовании rus и eng обяза-
	тельно английским.

Area: ария, которой принадлежит объект, порядковый номер и название.

Vnum: виртуальный номер объекта.

Type: команда 'type <object type>':
	тип объекта. 'type ?' показывает все возможные значения.
	Значения: light -- лампочка, scroll -- магический свиток, wand --
	волшебная палочка, staff -- магический посох, weapon -- оружие,
	treasure -- сокровище, armor -- доспехи/броня, potion -- микстура,
	clothing -- одежда, furniture -- мебель, trash -- мусор, container --
        контейнер, drink -- питье, key -- ключ, food -- еда, money --
        деньги, boat -- плав. средство, npc_corpse -- труп npc, fountain --
        фонтан, pill -- таблетка, protect (пока не используется), map -- карта
	(может использоваться для красоты, особого смысла не несет),
	portal -- портал, warp_stone -- ингредиент для nexus, room_key (не
	используется), gem -- драгоценный камень, jewelry -- украшение,
	jukebox -- автомат (играет песенки), book -- магическая книжка,
	herb -- травяная витаминка.

Gender: команда 'gender all/eng/rus <gender>':
	род объекта (female, male, plural, neutral, none = neutral).

Short desc: команда 'short all/eng/rus <desc>':
	короткое описание, не должно начинаться с артикля для eng/all.
	аналогично тому, как у мобов.

Long desc: команда 'long all/eng/rus <desc>':
	длинное описание. аналогично тому, как у мобов.

Limit: команда 'limit #', 'limit -1':
	ограничение на количество таких объектов в мире. 'limit -1' убирает
	имеющиеся ограничения по количеству. Не должно ни в коем случае быть
	объектов с limit 0. (Надо понимать, что они просто не будут появляться)

Level: команда 'level #':
	уровень объекта.

Wear flags: команда 'wear <wear flags>':
	определяет куда одевается объект, можно ли его поднимать с земли.
	Значения ('wear ?'): 
	take -- объекты без этого флага нельзя поднять с земли и их
	нельзя принести в жертву (sacrifice)
	finger -- одевается на палец
	neck -- одевается на шею
	body -- одевается на тело
	head -- одевается на голову
	legs -- одевается на ноги
	feet -- одевается на ступни
	hands -- одевается на руки
	arms -- одевается на плечи
	shield -- используется как щит
	about -- накидывается на тело сверху
	waist -- одевается на пояс
	wrist -- одевается на запястье
	wield -- используется как оружие
	hold -- берется в руку
	float_around -- летает вокруг
	tattoo -- татуировка (для религий)
	clanmark -- клановый знак
	face -- одевается на лицо

Stat flags: команда 'stat <stat flags>':
	определяет некоторые специфические свойства объекта.
	Значения ('stat ?'):
	glow -- светится (виден в темных комнатах без лампочки)
	hum -- 	гудит (оказывает влияние на 'enchant armor')
	dark -- темное (пока не используется)
	evil -- злое (пока не используется)
	invis -- невидимое
	magic -- магическая вещь (пока не используется) 
	nodrop -- нельзя бросить
	bless -- благословленная вещь (бьет нежить и зло больнее)
	antigood -- не может быть одета good'ом
	antievil -- не может быть одета evil'ом
	antineutral -- не может быть одета neutral'ом
	noremove -- не снимается
	rotdeath -- исчезает со временем
	visdeath -- становится видимой только после смерти моба
	meltdrop -- исчезает, когда бросает
	burnproof -- устойчив к огню
	not_edible -- не съедобное

Obj flags: команда 'obj <obj flags>':
	Особые характеристики. Значения ('obj ?'):
	nopurge -- нельзя сделать 'purge'
	nosac -- нельзя принести в жертву (sacrifice)
	nolocate -- не видится при 'locate obj'
	sellextract -- фиксированная цена (ignore haggle)
	nouncurse -- нельзя снять проклятие ('remove curse')
	nosell -- нельзя продать
	quest -- дается квестором как квест на поиск вещи
	clan_item -- источник силы клана
	quit_drop -- при выходе не сохраняется, а бросается на землю
	pit -- пит
	chquest -- особенная вещичка
	nofind -- не видится при 'find obj'
	noident -- не показываются характеристики объекта при ident, lore
      
Material: команда 'material <material>':
	материал, из которого изготовлен объект.

Condition: condition <%>
	Состояние объекта, степень его испорченности.

Weigh: weigh <num>
	вес объекта.

Cost: команда 'cost <num>'
	цена объекта.

Approx level:
	значение этого поля считается автоматически и оно не должно превышать
	уровня объекта

  На объекте могут иметься дополнительные аффекты, в том числе и дающие skillss:
'addaffect <type> { <where> | none } { <loc> <mod> | none } [<bits>]',
'delaff <num>'.
  На объекте могут быть специфические проги, см, соответствующую главу.
  Подобно комнатам и мобам можно делать 'clone' объектов. Удаляется объект
при помощи команды 'delete_obj'.
  Команда 'where' покажет в каких комнатах заресечен объект.

  Развернутое описание для объекта делается при помощи exd, аналогично тому
как это делается для комнат. Команды можно увидеть при помощи 'exd'.

	V.II. Внутреннее содержание объектов в зависимости от их типа.
	-------------------------------------------------------------

Для некоторых типов определены пять или меньше специальных полей, опреде-
ляющие содержание объекта. Значения для любого из этих полей можно узнать
при помощи команды 'v1 ?' (или v0, или v2, etc).

Тип light.
  [v2] длительность свечения, -1 для негаснущего светильника

Тип scroll.
  [v0] уровень заклинаний/молитв
  [v1] заклинание/молитва
  [v2] заклинание/молитва
  [v3] заклинание/молитва
  [v4] заклинание/молитва

Тип wand/staff/potion/pill.
  [v0] уровень заклинания/молитвы
  [v1] всего зарядов
  [v2] осталось зарядов
  [v3] заклинание/молитва

Тип weapon.
  [v0] класс оружия (exotic, sword, dagger, spear, staff, mace, axe, flail,
       whip, polearm, bow, arrow, lance)          
  [v1] 
  [v2] (v1)d(v2) наносимый оружием урон
  [v3] тип наносимого урона (damtype)
  [v4] специальные флаги (flaming -- обжигает огнем, frost -- морозит холодом,
       vampiric -- сосет жизнь противника, sharp -- острое, бъет особо больно,
       vorpal -- может убить с одного удара, twohands -- можно держать только
       двумя руками, shocking -- опаляет (кажется молнией), poison -- отравлен-
       ное, holy -- святое, katana -- катана, throwing -- метательное, nooffhand
       нельзя взять во вторую руку)

Тип armor:
  [v0] ac vs pierce
  [v1] ac vs bash
  [v2] ac vs slash
  [v3] ac vs exotic

Тип portal:
  [v0] количество прохождений до исчезновения (0 -- бесконечно)
  [v1] хар-ки выхода, как и для обычных выходов, см. выше
  [v2] флаги (normal_exit -- нормальный выход, nocurse -- работает в проклятых
       местах, gowith -- вместе с группой?, buggy -- сломанный, может выкинуть
       неизвестно куда, random -- ведет в случайное место)
  [v3] комната куда ведет портал
  [v4] ключик, если портал запертый

Тип drink/fountain:
  [v0] количество жидкости (максимум вмещается)
  [v1] сколько осталось
  [v2] жидкость
  [v3] отравлена или нет

Тип food:
  [v0] время насыщенности едой
  [v1] время насыщенности вообще
  [v3] отравлена или нет

Тип furniture:
  [v0] максимальная вместимость (человек)
  [v1] максимальный вес
  [v2] флаги (stand_at, stand_on, stand_in, sit_at, sit_on, sit_in, rest_at,
       rest_on, rest_in, sleep_at, sleep_on, sleep_in, put_at, put_on, put_in,
       put_inside)
  [v3] восстановление hp
  [v4] восстановление маны

Тип container:
  [v0] вес (можно засунуть внутрь всего)
  [v1] флаги (closable -- закрывающийся, pickproof -- устойчив к огню, closed --
       закрытый, locked -- запертый, put_on -- класть_на (не в, в сообщениях)
       quiver -- колчан для стрел)
  [v2] ключик, для запертого контейнера
  [v3] вместимость, максимальный вес для одной вещи, которую мона положить
       внутрь
  [v4] насколько уменьшает общий вес

Тип money:
  [v0] серебра
  [v1] золота

Тип book:
  [v0] тип книжки (spellbook, manual, prayerbook)
  [v1] даваемый spec
  [v2] шанс успешного прочтения
  [v3] результат неудачного прочтения (death, hallucination или ничего)
  [v4] сообщение при удачном использовании книжки

Остальные типы (treasure, clothing, jevelry, gem, warp_stone, trash, boat, map,
jukebox, key) не имеют особо выделенного внутреннего наполнения.

		VI. Расположение по комнатам.
		-----------------------------

  Команда для расположения мобов/объектов по комнатам -- 'reset ...'.
Если ты напишешь 'reset ?' тебе покажется список возможных вариантов
использования этой команды.
'reset now' обновит комнату, то есть, если ты добавил какие-то новые
ресеты, то после этой команды эти объекты/мобы появятся в комнате.
'reset where obj/mob <vnum>' покажет, где уже имеются ресеты моба или
объекта с таким виртуальным номером.
'reset clear' убирает все ресеты в комнате.
'reset probability <reset #> <%>' устанавливает вероятность появления
моба/объекта при обновлении арии/комнаты. Для использования этой
команды ресет уже должен существовать. <reset #> -- это номер ресета
по списку (посмотреть список можно командой 'reset').

			VI.I. Мобы.
			-----------

  Понятно, что в твоей арии один и тот же моб (имеется в виду прототип
с определенным виртуальным номером) может быть заресечен в нескольких
местах. Поэтому перво-наперво тебе нужно определиться вот с каким воп-
росом: сколько таких мобов будет жить в твоей арии. Это тебе понадобиться
в дальнейшем. Это будет число <total_lim>. Больше этого числа не будет
в мире одновременно находится мобов, имеющих одинаковый виртуальный но-
мер.

Теперь будем добавлять моба в комнату. Для этого используется команда:
'reset mob <vnum> [<total_lim>] [<room_lim>]'. <Vnum> -- виртуальный
номер, <total_lim> -- число, о котором было сказано чуть выше, а
<room_lim> -- это число мобов такого типа, могущих одновременно находится
в данной комнате. Например:
добавим следующий ресет 'reset mob 231 10 2'. Получим: 
[ 1] M[  231] Sir Sorrow                 [10- 2]
что означает [ 1] -- порядковый номер ресета в комнате,
             M -- заресечен моб
             [  231] -- виртуальный номер заресеченного моба.
             Sir Sorrow -- short description заресеченного моба
             [10- 2] -- максимальное количество таких мобов в мире и
	     количество таких мобов в комнате.
  Если room_lim не равен 1, то будет происходить следующее: когда первый
раз обновляется ария появится один такой моб, при следующем обновлении еще
один, и так далее до указанного room_lim включительно (если, конечно, в
комнату не забрел такой же моб откуда то по соседству, в этом случае он
тоже будет считаться).
  Если не указывать <total_lim> и <room_lim>, то они принимаются равными
единице. Например 'reset mob 231' значит то же самое, что и 'reset mob
231 1 1', а 'reset mob 231 10' то же самое, что и 'reset mob 231 10 1'.
  Возможен случай, когда хочется непременно иметь двух или больше мобов в
одной комнате, появляющихся не по очереди, а сразу. В таком случае, можно
написать ресет нужное число раз (лично я такого не рекомендую делать, но
мало ли). То есть чтобы у нас одновременно появлялось два Sir Sorrow нужно
использовать команду 'reset mob 231 10 2' два раза.
 Это все что касается мобов.

			VI.II.Объекты.
			--------------

  У объектов возможны три случая их расположения. На мобе, просто в комнате
и в объекте, находящемся в комнате или у моба.

VI.II.I. Первый случай. Объект моба у или одет на нем.

  Используемая для этого команда 'reset obj <vnum> <wear_loc> <reset_num>'.
Где <vnum> -- виртуальный номер объекта, <wear_loc> -- куда у моба должен быть
одет объект (или inventory, если хочется, чтобы просто находился у моба)
и <reset_num> -- это порядковый номер овеваемого моба по списку (смотреть
по 'reset').
 Например, оденем что-нибудь нашему Sir Sorrow. Пусть это будет sword-stick.
Значит нужно использовать 'reset obj 238 wield 1'. И мы получим:
[ 1] M[  231] Sir Sorrow                 [10- 2]
[ 2]     E[  238:100%] a sword-stick              <wielded>

[ 2] -- порядковый номер, E -- equiped (если даем в inventory будет G),
238 -- vnum, 100% -- вероятность появления (менять 'reset probability',
см. выше), a sword-stick -- короткое описание, и, наконец, <wielded> --
это куда одето.

  Надо не забывать о том, что объекты следует надевать мобу в соответствие
с их wear flags. Конечно, можно заставить моба одеть на ноги меч, но как
это будет смотреться? И еще, не нужно одевать мобу 'second wield', если
у него еще нет первого.
  Возможные <wear_loc>: none, inventory -- объект будет находится в inventory
моба, light -- как лампочка, lfinger -- на палец левой руки, rfinger -- на
палец правой руки, neck -- на шею, face -- на лицо, body -- на тело, head --
на голову, legs -- на ноги, feet -- на ступни, hands -- на руки (ладони),
arms -- на руки (плечи), shield -- в качестве щита, about -- накинуто сверху
на тело, waist -- одевается на талию (пояс), lwrist -- на левое запястье,
rwrist -- правое запястье, wielded -- оружие, hold -- берется в руку,
floating -- летает вокруг, tattoo -- татуировка, second -- второе оружие,
stuck -- воткнуто (например стрела), clanmark -- клановый знак. 

VI.II.II. Второй случай. Объект в комнате.

  Это самый простой случай, здесь нужно просто указать виртуальный номер
объекта и что он будет находится в комнате. Например, если к уже имеющемуся
добавим: 'reset obj 274 room', Получим:
[ 1] M[  231] Sir Sorrow                 [10- 2]
[ 2]     E[  238:100%] a sword-stick              <wielded>
[ 3] O[  274:100%] a cactus

[ 3] -- порядковый номер, O -- заресечен объект, 274 -- виртуальный
номер, 100% вероятность (менять 'reset probability', см. выше), a cactus --
short desc объекта. (Два раза положить один и тот же объект на пол нельзя).

VI.II.III. Третий случай. Объект в объекте.

  В этом случае используем команду 'reset obj <vnum> inside <reset_num>
[<total_lim>] [<inobj_lim>]'. <vnum> -- виртуальный номер объекта, который
мы хотим положить в другой объект. <reset_num> -- порядковый номер объекта,
в который мы кладем (надо помнить, что этот объект должен быть контейнером),
<total_lim> аналогично <total_lim> у мобов, то есть какое количество таких
объектов может присутствовать в мире одновременно (-1, если это количество
неограниченно), <inobj_lim> -- сколько объектов этого типа будет лежать внутри.
Если total_lim, inobj_lim не указываются, они принимаются равными единице.

	    VI.III. Создание случайных выходов.
	    -----------------------------------

  Когда у нас уже есть готовая комната, из нее расписаны выходы, мы
можем сделать так, что они будут меняться. Например, чтобы пройти из
комнаты а в комнату б, один раз нужно идти на север, а в другой раз на
юг, или на восток.
  Используемая для этого команда 'reset random <num>'.
Пусть у нас есть комната с одним выходом. Если мы делаем 'reset
random 4', это будет означать, что наш выход может принимать нап-
равления south, north, west, east. То есть, число <num> определяет
количество направлений, которые могут принимать имеющиеся выходы.
Напрмер, комната с четырьмя выходами и 'reset random 6'. Это будет
означать, что у нас может быть любая выборка выходов длиной 4. NESW,
NUWS, SDUE и т.д.  

			VII. Магазины.
			--------------
		   VII.I. Создание продавца.
		   -------------------------

  Чтобы моба превратить в продавца используется команда 'shop assign'.
Чтобы моба-продавца превратить в обычного используется команда 'shop
delete'.
  После того, как ты сделал моба продавцом, нажав <enter> или написав
'show', ты увидишь как у моба добавились следующие строки:
Shop data for [15016]:
  Markup for purchaser: 100%
  Markdown for seller:  100%
  Hours: 0 to 23.
В скобках указывается виртуальный номер твоего моба, которого ты превратил
в продавца. Далее, нужно проставить часы работы магазина. Команда 'shop
hours <opening> <closing>', <opening> -- час открытия, <closing> -- час
закрытия (часы в диапазоне 0, 24). Потом можно поставить насколько моб
завышает цену при продаже (по сравнению с реальной) и занижает при покупке.
Команда: 'shop profit <buying %> <selling %>'. <buying %> -- это за сколько
процентов от реальной цены будет моб покупать вещи (желательно 100-%),
<selling %> -- это за сколько процентов от реальной цены моб будет продавать
вещи (100+%). Этот процент не должен быть отрицательным.

Теперь необходимо проставить типы объектов, которыми будет торговать моб,
каждый моб может торговать не более чем пятью типами вещей. Команда: 'shop
type <#0-4> <item type>'. <#0-4> порядковый номер, <item type> -- тип, которым
будет вестись торговля. Например: 'shop type 0 wand', 'shop type 1 staff'
будет значить, что это моб будет торговать вещами типа wand и staff. Возмож-
ные значения <item type>: все, которые, определены для объектов, см. редакти-
рование обьектов.

Что будет продавать моб? Он будет продавать те объекты, которые будут
заресечены у него в инвентори (надо быть внимательным с полем cost этих
объектов, если у них cost = 0, они продаваться не будут).

		VII.II. Магазины домашних животных.
		----------------------------------

  Это особенный сорт магазинов. Он требует создания дополнительной
комнаты. Пусть наш магазин домашних животных будет располагаться в
комнате с виртуальным номер <vnum>. Это комната должна иметь room_flag
pet_shop. Рядом с ней должна быть создана еще одна комната с вирту-
альным номером <vnum+1>, которая будет служить "складом" домашних
питомцев (напрмер, 233 -- pet shop, 234 -- storage). На "складе" необ-
ходимо зересетить тех мобов, которые будут продаваться в pet shop.
Все они должны иметь act флаг -- pet.
  В самом магазине нужно поселить продавца. Если в твоем магазине будут
продаваться только домашние животные, 'shop type' делать не нужно,
достаточно только заполнить поля 'время работы', и 'наценка', 'занижение
цены' :) И он должен не убегать со своего рабочего места, иначе магазин
не будет работать. 

			VIII. Mud progs.
			----------------

  Существует три основных типа mpc: для комнат (room), для мобов (mob),
для объектов (obj). Каждый из которых делится на подтипы по тому, на
какой триггер они реагируют. (Посмотреть триггеры и возвращаемые прогами
значения можно в triggers.txt, правила написания прог и доступные в них
функции можно посмотреть в mprogs.txt).
  Создается прога командой 'create mpc <name>'. <name> должно отвечать
следующим требованиям: имя должно иметь формат type_trigger_xxx, где
type -- тип проги (room, obj, mob), trigger -- на какой триггер она
срабатывает (fight, random, get, etc), xxx -- как правило это название
объекта/моба/комнаты для которого пишется прога, или просто передает смысл
проги, если она используется в нескольких местах.
Примеры:
	mob_give_fireflash_rug;
	obj_sac_excalibur;
	room_random_pixie_forest.
 
			
			IX. Послесловие.
			----------------

  Здесь нигде ничего не говорится о том, какие аффекты допустимы на вещах
или о том, какие характеристики должны иметь мобы. Это можно (и нужно)
глядеть в obj_rules.txt, mob_rules.txt.


(c) писано Phrinn, октябрь 2001.
